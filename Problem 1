import nltk
nltk.download('stopwords')
nltk.download('punkt_tab')
import pandas as pd
import re
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import gensim.downloader as api
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

df = pd.read_csv('spam.csv', encoding='latin-1')
stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = text.lower()
    tokens = word_tokenize(text)
    tokens = [re.sub(r'[^a-z]', '', t) for t in tokens]
    tokens = [t for t in tokens if t and t not in stop_words]
    return tokens

df['Tokens'] = df['v2'].apply(preprocess)

w2v_model = api.load("word2vec-google-news-300")  # ~1.5GB

def vectorize(tokens):
    vectors = [w2v_model[word] for word in tokens if word in w2v_model.key_to_index]
    return np.mean(vectors, axis=0) if vectors else np.zeros(w2v_model.vector_size)

X = np.vstack(df['Tokens'].apply(vectorize))
y = (df['v1'] == 'spam').astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.4f}')

def predict_message_class(model, w2v_model, message):
    tokens = preprocess(message)
    vec = vectorize(tokens).reshape(1, -1)
    prediction = model.predict(vec)[0]
    return 'spam' if prediction == 1 else 'ham'
